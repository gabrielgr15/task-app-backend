
services:  
  api-gateway:    
    build: ./api-gateway
    container_name: api_gateway
    ports:      
      - "${GATEWAY_PORT:-4000}:4000"
    environment:     
      NODE_ENV: test
      PORT: ${GATEWAY_PORT:-4000}
      USER_SERVICE_URL: http://user-service:${USER_SERVICE_PORT:-4001} 
      TASKS_SERVICE_URL: http://tasks-service:${TASKS_SERVICE_PORT:-4002} 
      ACTIVITY_SERVICE_URL: http://activity-service:${ACTIVITY_SERVICE_PORT:-4003}
      JWT_SECRET: ${JWT_SECRET}     
      REDIS_HOST: ${REDIS_HOST} 
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:            
      activity-service:
        condition: service_healthy
      tasks-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 10s
      timeout: 10s
      retries: 70
      start_period: 10s  


  user-service:
    build: ./user-service 
    container_name: user_service           
    environment:      
      PORT: ${USER_SERVICE_PORT:-4001}
      MONGO_URI: ${MONGO_USER_URI}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: ${REDIS_HOST} 
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:      
      - redis
    restart: unless-stopped 
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 10s
      timeout: 10s
      retries: 70
      start_period: 10s


  tasks-service:
    build: ./tasks-service 
    container_name: tasks_service          
    environment:      
      PORT: ${TASKS_SERVICE_PORT:-4002}
      MONGO_URI: ${MONGO_TASKS_URI}      
      RABBITMQ_URI: ${RABBITMQ_URI}
    depends_on:      
      - rabbitmq
    restart: unless-stopped 
    networks:
      - app-network      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/health"]
      interval: 10s
      timeout: 10s
      retries: 70
      start_period: 10s


  activity-service:
    build: ./activity-service
    container_name: activity_service
    environment:
      PORT: ${ACTIVITY_SERVICE_PORT:-4003}
      MONGO_URI: ${MONGO_ACTIVITY_URI}
      RABBITMQ_URI: ${RABBITMQ_URI}
    depends_on:
      rabbitmq:
        condition: service_healthy 
      mongo:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 10s
      timeout: 10s
      retries: 70
      start_period: 40s


  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api-gateway:4000
    depends_on:            
      api-gateway:
        condition: service_healthy
    networks:
      - app-network


  mongo:
    image: mongo:latest
    container_name: mongo_db
    ports:
      - "27017:27017" 
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network  
    # Optional: Set root credentials for basic security (good practice)
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: mongoadmin
    #   MONGO_INITDB_ROOT_PASSWORD: changeme


  rabbitmq:    
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:     
      - "5672:5672"      
      - "15672:15672"
    environment:      
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:      
      - rabbitmq_data:/var/lib/rabbitmq
    networks:     
      - app-network
    healthcheck: # <--- ADD THIS ENTIRE BLOCK
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s


  redis:    
    image: redis:7-alpine
    ports:
      - "6379:6379"
    container_name: redis    
    command: redis-server --requirepass ${REDIS_PASSWORD}   
    volumes:      
      - redis_data:/data
    networks:      
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  


networks:
  app-network:   
    driver: bridge


volumes:  
  rabbitmq_data:  
  redis_data:
  mongo_data: