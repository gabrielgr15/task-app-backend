name: CI/CD

on:
  push:
    branches: [ master ]  
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: write
      
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GATEWAY_PORT: 4000
      USER_SERVICE_PORT: 4001
      TASKS_SERVICE_PORT: 4002
      ACTIVITY_SERVICE_PORT: 4003
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_USER: user
      MONGO_ACTIVITY_URI: ${{ secrets.MONGO_ACTIVITY_URI }}
      MONGO_TASKS_URI: ${{ secrets.MONGO_TASKS_URI }}
      MONGO_USER_URI: ${{ secrets.MONGO_USER_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
      RABBITMQ_URI: ${{ secrets.RABBITMQ_URI }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref }}-
            ${{ runner.os }}-buildx-    

      - name: Install user-service dependencies
        working-directory: ./user-service
        run: npm ci

      - name: Install tasks-service dependencies
        working-directory: ./tasks-service
        run: npm ci  

      - name: Install activity-service dependencies
        working-directory: ./activity-service
        run: npm ci  

      - name: Install api-gateway dependencies
        working-directory: ./api-gateway
        run: npm ci  

      - name: Build Docker images
        run: docker compose build    

      - name: Run all integration tests
        working-directory: ./api-gateway
        run: npm test        

      - name: Dump Docker logs on failure
        if: failure()
        run: docker compose -f ./docker-compose.yml logs

  push-to-registry:   
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    strategy:
      matrix:
        service: [ user-service, tasks-service, activity-service, api-gateway ]

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Build and push ${{ matrix.service }} Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/task-app-${{ matrix.service }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/task-app-${{ matrix.service }}:latest
          labels: ${{steps.meta.outputs.labels}}  

  deploy-to-render:
    runs-on: ubuntu-latest
    needs: push-to-registry
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  
    strategy:
      matrix:
        service:
          - name: user-service
            secret_hook: RENDER_USER_SERVICE_HOOK
          - name: tasks-service
            secret_hook: RENDER_TASKS_SERVICE_HOOK
          - name: activity-service
            secret_hook: RENDER_ACTIVITY_SERVICE_HOOK
          - name: api-gateway
            secret_hook: RENDER_API_GATEWAY_HOOK

    steps:
      - name: Trigger Render Deploy for ${{ matrix.service.name }}
        run: |
          echo "Sending deploy signal to Render for service: ${{ matrix.service.name }}"
          curl -X POST "${{ secrets[matrix.service.secret_hook] }}"